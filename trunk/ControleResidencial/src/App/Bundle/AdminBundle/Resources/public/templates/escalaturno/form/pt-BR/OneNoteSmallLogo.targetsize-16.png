int offset, __local half *p);
void __attribute__((overloadable)) vstore_half_rtn(float data, uint offset, __local half *p);
void __attribute__((overloadable)) vstore_half(float data, uint offset, __private half *p);
void __attribute__((overloadable)) vstore_half_rte(float data, uint offset, __private half *p);
void __attribute__((overloadable)) vstore_half_rtz(float data, uint offset, __private half *p);
void __attribute__((overloadable)) vstore_half_rtp(float data, uint offset, __private half *p);
void __attribute__((overloadable)) vstore_half_rtn(float data, uint offset, __private half *p);
#ifdef cl_khr_fp64
void __attribute__((overloadable)) vstore_half(double data, uint offset, __global half *p);
void __attribute__((overloadable)) vstore_half_rte(double data, uint offset, __global half *p);
void __attribute__((overloadable)) vstore_half_rtz(double data, uint offset, __global half *p);
void __attribute__((overloadable)) vstore_half_rtp(double data, uint offset, __global half *p);
void __attribute__((overloadable)) vstore_half_rtn(double data, uint offset, __global half *p);
void __attribute__((overloadable)) vstore_half(double data, uint offset, __local half *p);
void __attribute__((overloadable)) vstore_half_rte(double data, uint offset, __local half *p);
void __attribute__((overloadable)) vstore_half_rtz(double data, uint offset, __local half *p);
void __attribute__((overloadable)) vstore_half_rtp(double data, uint offset, __local half *p);
void __attribute__((overloadable)) vstore_half_rtn(double data, uint offset, __local half *p);
void __attribute__((overloadable)) vstore_half(double data, uint offset, __private half *p);
void __attribute__((overloadable)) vstore_half_rte(double data, uint offset, __private half *p);
void __attribute__((overloadable)) vstore_half_rtz(double data, uint offset, __private half *p);
void __attribute__((overloadable)) vstore_half_rtp(double data, uint offset, __private half *p);
void __attribute__((overloadable)) vstore_half_rtn(double data, uint offset, __private half *p);
#endif

/**
 * The floatn value given by data is converted to
 * a halfn value using the appropriate rounding
 * mode. The halfn value is then written to
 * address computed as (p + (offset * n)). The
 * address computed as (p + (offset * n)) must be
 * 16-bit aligned.
 * vstore_halfn uses the current rounding mode.
 * The default current rounding mode is round to
 * nearest even.
 */
void __attribute__((overloadable)) vstore_half2(float2 data, uint offset, __global half *p);
void __attribute__((overloadable)) vstore_half3(float3 data, uint offset, __global half *p);
void __attribute__((overloadable)) vstore_half4(float4 data, uint offset, __global half *p);
void __attribute__((overloadable)) vstore_half8(float8 data, uint offset, __global half *p);
void __attribute__((overloadable)) vstore_half16(float16 data, uint offset, __global half *p);
void __attribute__((overloadabl